#include <stdint.h>
#include <stdlib.h>
// Constant declarations to access port registers
// using symbolic names instead of addresses
#define GPIO_PORTF_DATA_R     (*((volatile unsigned long *)0x400253FC))
#define GPIO_PORTF_DIR_R      (*((volatile unsigned long *)0x40025400))
#define GPIO_PORTF_AFSEL_R    (*((volatile unsigned long *)0x40025420))
#define GPIO_PORTF_PUR_R      (*((volatile unsigned long *)0x40025510))
#define GPIO_PORTF_DEN_R      (*((volatile unsigned long *)0x4002551C))
#define GPIO_PORTF_LOCK_R     (*((volatile unsigned long *)0x40025520))
#define GPIO_PORTF_CR_R       (*((volatile unsigned long *)0x40025524))
#define GPIO_PORTF_AMSEL_R    (*((volatile unsigned long *)0x40025528))
#define GPIO_PORTF_PCTL_R     (*((volatile unsigned long *)0x4002552C))
#define SYSCTL_RCGC2_R        (*((volatile unsigned long *)0x400FE108))
	
// Global variables
unsigned long switch_1, switch_2; // inputs from PF4, PF0

// Function prototypes
void PortFInit(void);             // port F initial fuction
void delay(int sec);							// delay function
void red(void);										// red led on-off dunction
void yellow(void);								// yellow led on-off dunction
void blue(void);									// yellow led on-off dunction
volatile int k = 1;								// delay time controller variable
int cond;													// condition checker variable
volatile int st = 0;							// condition counter for toggle

int  main(void) {
    // Setup
    // initializes the real board grader for lab 4
    PortFInit();        // initialize PF4, PF3, PF2, PF1, PF0
    // Loop
    while (1) {
        switch_1 = GPIO_PORTF_DATA_R & 0x10;  // read PF4 into SW1
        switch_2 = GPIO_PORTF_DATA_R & 0x01;  // read PF0 into SW2	
				if(cond == 0){	// cond = 0 red on
					red();
					if(st%2==0){	//check if toggle on or off
						cond = 1;
					}
					else{
						cond=2;
						st = 1;
				  }
				}
				else if(cond == 1 && st%2==0){ // if no toggle and cond = 1 yellow on
					if(st%2==0){
						yellow();
						cond = 2;
					}
					else{
						st = 1;
					}
				}
				else if(cond == 2){	// blue on
					blue();
					cond = 0;
				}
				}
		return 0;
			}
			

 // Initializes port F pins for input and output.
void PortFInit(void) {
    SYSCTL_RCGC2_R    |= 0x00000020;     // 1) F clock
    GPIO_PORTF_LOCK_R  = 0x4C4F434B;     // 2) unlock Port F
    GPIO_PORTF_CR_R   |= 0x1F;           // allow changes to PF4-PF0
    GPIO_PORTF_AMSEL_R = 0x00;           // 3) disable analog function
    GPIO_PORTF_PCTL_R  = 0x00;           // 4) GPIO clear bit PCTL
    GPIO_PORTF_DIR_R  |= 0x0E;           // 5) PF4, PF0 inputs. PF3, PF2, PF1 outputs
    GPIO_PORTF_AFSEL_R = 0x00;           // 6) no alternate function
    GPIO_PORTF_PUR_R  |= 0x11;           // enable pullup resistors on PF4, PF0
    GPIO_PORTF_DEN_R  |= 0x1F;           // 7) enable digital pins PF4-PF0
}
	
void delay(int sec){
	int c = 1, d = 1;
	for( c = 1; c <= sec; c++)
		for( d = 1; d <= 4000000; d++){}
		}

void red(void){	// red led control func.
	if(!switch_1){// if p4 pressed enter this loop and increase delay by +1
			k++;
			GPIO_PORTF_DATA_R = 0x02; 
			delay(2+k);
	}
	else if(switch_1){// if p4 is not pressed do nothing
			GPIO_PORTF_DATA_R = 0x02;
			delay(2+k);	
			if(!switch_2){
				st=st+1;
			}
			else{
				st=st;
			}
	}
}

void yellow(void){ // yellow led control func.
	if(!switch_1){
			k++;
			GPIO_PORTF_DATA_R = 0x0A; 
			delay(k);
	}
	else if(switch_1){
			GPIO_PORTF_DATA_R = 0x0A;
			delay(k);
			if(!switch_2){
				st=st+1;
			}
			else{
				st=st;
			}
	}
}

void blue(void){ // blue led control func.
	if(!switch_1){
			k++;
			GPIO_PORTF_DATA_R = 0x04; 
			delay(1+k);
	}
	else if(switch_1){
			GPIO_PORTF_DATA_R = 0x04; 
			delay(1+k);
			if(!switch_2){
				st=st+1;
			}
			else{
				st=st;
			}
	}
}

