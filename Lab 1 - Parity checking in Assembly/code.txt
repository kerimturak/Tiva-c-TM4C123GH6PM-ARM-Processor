GPIO_PORTE_DATA_R  EQU 0x400243FC     
GPIO_PORTE_DIR_R   EQU 0x40024400
GPIO_PORTE_DEN_R   EQU 0x4002451C
SYSCTL_RCGCGPIO_R  EQU 0x400FE608	
GPIO_PORTE_AMSEL_R EQU 0x40024528;analog
GPIO_PORTE_PCTL_R  EQU 0x4002452C;general purpose
GPIO_PORTE_AFSEL_R EQU 0x40024420;alternative func.	
GPIO_PE2           EQU 0x40024010 ; LED output
GPIO_PE3           EQU 0x40024020 ; SW1 input
GPIO_PE4           EQU 0x40024040 ; SW2 input
GPIO_PE5           EQU 0x40024080 ; SW3 input
       THUMB
       AREA    DATA, ALIGN=2
;global variables go here
      ALIGN
      AREA    |.text|, CODE, READONLY, ALIGN=2
      EXPORT  Start
Subroutine
     ;code to run once that initializes PE4,PE2,PE1,PE0
	 ; Enable ClOCK FOR PORT E
	LDR R1 , =SYSCTL_RCGCGPIO_R
	LDR R0 , [R1]
	ORR R0 ,  #0x10;0001.0000
	STR R0 , [R1]
	NOP         ; No operation for 3 cycles
	NOP			; No operation for 3 cycles
	NOP			; No operation for 3 cycles
	;Disable analog functionality
	LDR R1, =GPIO_PORTE_AMSEL_R
	LDR R0, [R1]
	BIC R0, R0, #0xFF; clear bit 
	STR R0, [R1]
	;Configure as GPIO
	LDR R1, =GPIO_PORTE_PCTL_R
	LDR R0, [R1]
	MOV R2, #0xFFFF
	BIC R0, R0, R2
	STR R0, [R1]
	;Direction register
	LDR R1, =GPIO_PORTE_DIR_R     
	LDR R0 , [R1]
	ORR R0 , #0x04 ;0000_0100 PE4 PE3 PE2 PE1 PE0 1=OUTPUT 0=INPUT
	STR R0 , [R1]
	;Disable alternate functions
	LDR R1, =GPIO_PORTE_AFSEL_R
	LDR R0 , [R1]
	BIC R0 , #0xFF 
	STR R0 , [R1]
	;Enable the digital port
	LDR R1, =GPIO_PORTE_DEN_R
	LDR R0 , [R1]
	ORR R0, R0, #0x3C
	STR R0 , [R1]
	BX  LR
Start
	BL  Subroutine
    LDR R5,=GPIO_PE2  ; Load address for PE2 into R5
    LDR R6,=GPIO_PE3  ; Load address for PE3 into R6
    LDR R7,=GPIO_PE4 ; Load address for PE4 into R7
    LDR R8,=GPIO_PE5 ; Load address for PE5 into R8
    MOV R4,#0         ; Move 0000 into R4	
loop
    ;code that runs over and over
      LDR R0,[R6]       ; Load value from PE3 to R0
      MOV R0,R0,LSR #3  ; Right shift R0 by 3
      LDR R1,[R7]      ; Load value from PE4 to R1
      MOV R1,R1,LSR #4  ; Right shift R1 by 4
      LDR R2,[R8]      ; Load value from PE5 to R2
      MOV R2,R2,LSR #5  ; Right shift R2 by 5
      EOR R3,R0,R1      ; R0 XOR R1 -> R3
      EOR R3,R3,R2      ; R2 XOR R3 -> R3
      EOR R3,R3,R4      ; R3 XOR 1  -> R3
      MOV R3,R3,LSL #2  ; Left shift R3 by 2
      STR R3,[R5]       ; Store R3 in PE2 address
      B   loop
	  
    ALIGN        ; make sure the end of this section is aligned
    END          ; end of file
